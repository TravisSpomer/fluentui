@import '~@fluentui/common-styles/dist/sass/focusBorder';
@import '~@fluentui/common-styles/dist/sass/fluentuitokens';

/**
 * TODO: Once theming is updated, consider removing all of this.
 *
 * Note: All :root rules must be literals, OR references to variables
 * defined as literals in the same scope. If you refer to variables,
 * they will be resolved on the :root element only; not at usage time.
**/
:root {
  /* sizing */
  --button-size-smallest: 24px;
  --button-size-smaller: 24px;
  --button-size-small: 24px;
  --button-size-regular: 32px;
  --button-size-large: 40px;
  --button-size-larger: 48px;
  --button-size-largest: 64px;

  --button-padding: 0 24px;
  --button-margin: 0;
  --button-width: auto;
  --button-minHeight: var(--button-size-regular);
  --button-minWidth: 96px;
  --button-maxWidth: 280px;

  --button-contentGap: 10px;
  --button-iconSize: 16px;

  /* borders and shadow */
  --button-borderRadius: var(--button-root-corner-radius);
  --button-borderWidth: var(--button-root-stroke-width);
  --button-boxShadow: none; //0px 2px 4px -0.75px rgba(0, 0, 0, 0.1);
  --button-disabled-boxShadow: none;

  /* transforms */
  --button-pressed-transform: scale(0.95);
  --button-transition: transform 0.1s linear;

  /* TODO: Remove. Fonts should only be defined in the theme. */
  --button-fontFamily: var(--button-text-font-family);
  --button-fontSize: var(--button-text-font-size);
  --button-fontWeight: var(--button-text-font-weight);

  /* TODO: Consider remove. Colors should only be defined in the theme. */

  --button-focusColor: #000;
  --button-focusInnerColor: #fff;

  --button-background: var(--button-root-fill-color-rest);
  --button-borderColor: var(--button-root-stroke-color-rest);
  --button-contentColor: var(--button-text-fill-color-rest);
  --button-iconColor: inherit;

  --button-hovered-background: var(--button-root-fill-color-hover);
  --button-hovered-borderColor: var(--button-root-stroke-color-hover);
  --button-hovered-contentColor: var(--button-text-hover-color-rest);
  --button-hovered-iconColor: var(--button-iconColor);

  --button-focused-background: var(--button-root-fill-color-rest);
  --button-focused-borderColor: var(--button-root-stroke-color-rest);
  --button-focused-contentColor: var(--button-text-fill-color-rest);
  --button-focused-iconColor: var(--button-iconColor);

  --button-pressed-background: var(--button-root-fill-color-pressed);
  --button-pressed-borderColor: var(--button-root-stroke-color-pressed);
  --button-pressed-contentColor: var(--button-text-fill-color-pressed);
  --button-pressed-iconColor: var(--button-iconColor);

  --button-disabled-opacity: 1;
  --button-disabled-background: var(--button-root-fill-color-disabled);
  --button-disabled-borderColor: var(--button-root-stroke-color-disabled);
  --button-disabled-contentColor: var(--button-text-fill-color-disabled);
  --button-disabled-iconColor: var(--button-text-fill-color-disabled);

  /* TODO: Remove. Accent should only be defined in the theme, though primary depends on it. */
  --accent-background: var(--accentbutton-root-fill-color-rest);
  --accent-borderColor: var(--accentbutton-root-stroke-color-rest);
  --accent-contentColor: var(--accentbutton-text-fill-color-rest);
  --accent-iconColor: inherit;

  --accent-hovered-background: var(--accentbutton-root-fill-color-hover);
  --accent-hovered-borderColor: var(--accentbutton-root-stroke-color-hover);
  --accent-hovered-contentColor: var(--accentbutton-text-hover-color-rest);
  --accent-hovered-iconColor: var(--accentbutton-iconColor);

  --accent-focused-background: var(--accentbutton-root-fill-color-rest);
  --accent-focused-borderColor: var(--accentbutton-root-stroke-color-rest);
  --accent-focused-contentColor: var(--accentbutton-text-fill-color-rest);
  --accent-focused-iconColor: var(--accentbutton-iconColor);

  --accent-pressed-background: var(--accentbutton-root-fill-color-pressed);
  --accent-pressed-borderColor: var(--accentbutton-root-stroke-color-pressed);
  --accent-pressed-contentColor: var(--accentbutton-text-fill-color-pressed);
  --accent-pressed-iconColor: var(--accentbutton-iconColor);

  --accent-disabled-opacity: 1;
  --accent-disabled-background: var(--accentbutton-root-fill-color-disabled);
  --accent-disabled-borderColor: var(--accentbutton-root-stroke-color-disabled);
  --accent-disabled-contentColor: var(--accentbutton-text-fill-color-disabled);
  --accent-disabled-iconColor: var(--accentbutton-text-fill-color-disabled);
}

/**
  * Slot definitions
  *
  * Slot definitions must align to the names of the slots themselves. They should:
  *
  * 1. Contain the actual css property definitions (E.g. background-color: {value})
  * 2. Property definitions should map to tokens using the format: {component}-{property}
  * 3. Avoid hard coding values unless there are absolutely no use cases to change
  *    the property value.
  * 4. Order hardcoded css values first, tokens based second. This way we can identify
  *    what is hardcoded easily.
 **/

.root {
  cursor: pointer;
  align-items: center;
  border-style: solid;
  display: inline-flex;
  justify-content: center;
  outline: none;
  position: relative;
  user-select: none;
  box-sizing: border-box;
  vertical-align: middle;

  background: var(--button-background, white);
  color: var(--button-contentColor, rgb(44, 38, 33));

  border-color: var(--button-borderColor);
  border-radius: var(--button-borderRadius);
  border-width: var(--button-borderWidth);
  box-shadow: var(--button-boxShadow);

  width: var(--button-width);
  height: var(--button-height);
  min-height: var(--button-minHeight);

  cursor: pointer;
  padding: var(--button-padding);
  transition: var(--button-transition);
  white-space: var(--button-whiteSpace, nowrap);

  font-family: var(--button-fontFamily);
  font-size: var(--button-fontSize);
  font-weight: var(--button-fontWeight);

  @include focus-border(
    $padding: -1px,
    $color: var(--button-focusColor),
    $thickness: var(--button-focus-width, 2px),
    $radius: var(--button-borderRadius)
  );
  @include focus-box-shadow($hOffset: 0, $vOffset: 0, $blur: 0, $thickness: 1px, $color: var(--button-focusInnerColor));

  /**
  * Modifiers
  *
  * Modifiers must align to the props on the component. They should:
  *
  * 1. Redefine the values for {component}-{property} tokens.
  * 2. Map property definitions to variables using the format: {component}-{property}
  * 3. Avoid defining styles directly.
 **/
  &._primary {
    --button-background: var(--accent-background);
    --button-borderColor: var(--accent-borderColor);
    --button-contentColor: var(--accent-contentColor);
    --button-iconColor: var(--accent-iconColor);

    --button-hovered-background: var(--accent-hovered-background);
    --button-hovered-borderColor: var(--accent-hovered-borderColor);
    --button-hovered-contentColor: var(--accent-hovered-contentColor);
    --button-hovered-iconColor: var(--accent-hovered-iconColor);

    --button-focused-background: var(--accent-focused-background);
    --button-focused-borderColor: var(--accent-focused-borderColor);
    --button-focused-contentColor: var(--accent-focused-contentColor);
    --button-focused-iconColor: var(--accent-focused-iconColor);

    --button-pressed-background: var(--accent-pressed-background);
    --button-pressed-borderColor: var(--accent-pressed-borderColor);
    --button-pressed-contentColor: var(--accent-pressed-contentColor);
    --button-pressed-iconColor: var(--accent-pressed-iconColor);

    --button-disabled-background: var(--accent-disabled-background);
    --button-disabled-borderColor: var(--accent-disabled-borderColor);
    --button-disabled-contentColor: var(--accent-disabled-contentColor);
    --button-disabled-iconColor: var(--accent-disabled-iconColor);
  }

  &._iconOnly {
    --button-width: var(--button-height, var(--button-minHeight));
    --button-padding: 0;
  }

  &._circular {
    --button-borderRadius: 50000px;
  }

  &._fluid {
    width: 100%;
    max-width: 100%;

    --button-pressed-transform: scale(0.98);
  }

  &._size_smallest {
    --button-minHeight: var(--button-size-smallest);
  }

  &._size_smaller {
    --button-minHeight: var(--button-size-smaller);
  }

  &._size_small {
    --button-minHeight: var(--button-size-small);
  }

  &._size_large {
    --button-minHeight: var(--button-size-large);
  }

  &._size_larger {
    --button-minHeight: var(--button-size-larger);
  }
  &._size_largest {
    --button-minHeight: var(--button-size-largest);
  }

  &._disabled {
    pointer-events: none;
    opacity: var(--button-disabled-opacity);
    background-color: var(--button-disabled-background);
    color: var(--button-disabled-contentColor);
    border-color: var(--button-disabled-borderColor);
    box-shadow: var(--button-disabled-boxShadow);
  }
}

.icon {
  color: var(--button-iconColor);
  display: flex;
  align-items: center;
  justify-content: center;
  width: var(--button-iconSize);
  height: var(--button-iconSize);
  font-size: var(--button-iconSize, inherit);
  font-weight: normal;

  &._disabled {
    color: var(--button-disabled-iconColor, var(--button-disabled-contentColor));
  }
}

/* selectors */

.root > *:not(:first-child) {
  margin-left: var(--button-contentGap);
}

.root:hover {
  background: var(--button-hovered-background, var(--button-background));
  color: var(--button-hovered-contentColor, var(--button-contentColor));
  border-color: var(--button-hovered-borderColor, var(--button-borderColor));
  box-shadow: var(--button-hovered-boxShadow, var(--button-boxShadow));

  .icon {
    color: var(--button-hovered-iconColor, var(--button-hovered-contentColor));
  }
}

.root:active {
  background: var(--button-pressed-background, var(--button-hovered-background));
  color: var(--button-pressed-contentColor, var(--button-hovered-contentColor, var(--button-contentColor)));
  border-color: var(--button-pressed-borderColor, var(--button-hovered-borderColor, var(--button-borderColor)));
  box-shadow: var(--button-pressed-boxShadow, var(--button-hovered-boxShadow, var(--button-boxShadow)));

  transform: var(--button-pressed-transform);
  transition: var(--button-pressed-transition);

  .icon {
    color: var(--button-pressed-iconColor, var(--button-pressed-contentColor));
  }
}
